swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "Minis API"
paths:

  /person:
    get:
      tags: [Person]
      operationId: "controllers.ctrl_person.get"
      summary: Get all the person
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/person_id"
        - $ref: "#/parameters/person_firstname"
        - $ref: "#/parameters/person_lastname"        
      responses:
        200:
          $ref: "#/responses/Persons"
          
       
    post:
      tags: [Person]
      summary: "Add a new person to the store"
      description: ""
      operationId: "controllers.ctrl_person.post"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
         - $ref: "#/parameters/person_body"      
      responses:
         405:
           $ref: "#/responses/invalidinput"
           
  /person/{person_id}:
    get:
      tags: [Person]
      operationId: controllers.ctrl_person.get_id
      summary: Get a single person
      parameters:
        - $ref: '#/parameters/person_id_path'
      responses:
        200:
          $ref: "#/responses/Persons"
        404:
          description: Person does not exist
    put:
      tags: [Person]
      operationId: controllers.ctrl_person.put
      summary: Update a person
      parameters:
        - $ref: '#/parameters/person_id_path'
        - $ref: "#/parameters/person_body"        
      responses:
        200:
          $ref: "#/responses/Persons"
        400:
          description: Failed due to invalid data
        404:
          description: Person does not exist
    delete:
      tags: [Person]
      operationId: controllers.ctrl_person.delete
      summary: Delete a person
      parameters:
        - $ref: '#/parameters/person_id_path'
      responses:
        204:
          description: Entry was deleted
        404:
          description: Entry does not exist
          
  /offtime:
    get:
      tags: [Offtime]
      operationId: "controllers.ctrl_offtime.get"
      summary: Get all the offtime
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offtime_fade_in"
        - $ref: "#/parameters/offtime_start"
        - $ref: "#/parameters/offtime_end"        
        - $ref: "#/parameters/offtime_fade_out"
      responses:
        200:
          $ref: "#/responses/Offtimes"
          
       
    post:
      tags: [Offtime]
      summary: "Add a new offtime to the store"
      description: ""
      operationId: "controllers.ctrl_offtime.post"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
         - $ref: "#/parameters/offtime_body"      
      responses:
         405:
           $ref: "#/responses/invalidinput"
           
  /offtime/{offtime_id}:
    get:
      tags: [Offtime]
      operationId: controllers.ctrl_offtime.get_id
      summary: Get a single offtime
      parameters:
        - $ref: '#/parameters/offtime_id_path'
      responses:
        200:
          $ref: "#/responses/Offtimes"
        404:
          description: Offtime does not exist
    put:
      tags: [Offtime]
      operationId: controllers.ctrl_offtime.put
      summary: Update a offtime
      parameters:
        - $ref: '#/parameters/offtime_id_path'
        - $ref: "#/parameters/offtime_body"        
      responses:
        200:
          $ref: "#/responses/Offtimes"
        400:
          description: Failed due to invalid data
        404:
          description: Offtime does not exist
    delete:
      tags: [Offtime]
      operationId: controllers.ctrl_offtime.delete
      summary: Delete a offtime
      parameters:
        - $ref: '#/parameters/offtime_id_path'
      responses:
        204:
          description: Entry was deleted
        404:
          description: Entry does not exist
          
          
  /ministrant:
    get:
      tags: [Ministrant]
      operationId: "controllers.ctrl_ministrant.get"
      summary: Get all the ministrant
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/ministrant_id"
      responses:
        200:
          $ref: "#/responses/Ministranten"
          
       
    post:
      tags: [Ministrant]
      summary: "Add a new ministrant to the store"
      description: ""
      operationId: "controllers.ctrl_ministrant.post"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
         - $ref: "#/parameters/ministrant_body"      
      responses:
         405:
           $ref: "#/responses/invalidinput"
           
  /ministrant/{ministrant_id}:
    get:
      tags: [Ministrant]
      operationId: controllers.ctrl_ministrant.get_id
      summary: Get a single ministrant
      parameters:
        - $ref: '#/parameters/ministrant_id_path'
      responses:
        200:
          $ref: "#/responses/Ministrant"
        404:
          description: Ministrant does not exist
    put:
      tags: [Ministrant]
      operationId: controllers.ctrl_ministrant.put
      summary: Update a ministrant
      parameters:
        - $ref: '#/parameters/ministrant_id_path'
        - $ref: "#/parameters/ministrant_body"        
      responses:
        200:
          $ref: "#/responses/Ministrant"
        400:
          description: Failed due to invalid data
        404:
          description: Ministrant does not exist
    delete:
      tags: [Ministrant]
      operationId: controllers.ctrl_ministrant.delete
      summary: Delete a ministrant
      parameters:
        - $ref: '#/parameters/ministrant_id_path'
      responses:
        204:
          description: Entry was deleted
        404:
          description: Entry does not exist
          
    
          

parameters:
  limit:
    in: query
    name: limit
    type: integer
    minimum: 0
    default: 100
    
  person_id_path:
    name: person_id
    description: Person unique identifier
    type: string    
    in: path
    required: true
  person_id:
    name: person_id
    description: Person unique identifier
    type: string
    in: query
  person_firstname:
    name: firstname
    description: Person unique identifier
    type: string
    in: query
  person_lastname:
    name: lastname
    description: Person unique identifier
    type: string
    in: query
  person_body:      
    in: "body"              
    name: "person_data"
    description: "Person object that needs to be added"
    required: true
    schema:
      $ref: "#/definitions/Person"
      
  ministrant_id_path:
    name: ministrant_id
    description: Ministrant unique identifier
    type: string    
    in: path
    required: true
  ministrant_id:
    name: ministrant_id
    description: Ministrant unique identifier
    type: string
    in: query
  ministrant_body:      
    in: "body"              
    name: "ministrant_data"
    description: "ministrant object that needs to be added"
    required: true
    schema:
      $ref: "#/definitions/Ministrant"
      
  offtime_id_path:
    name: offtime_id
    description: unique identifier
    type: string
    in: path
    required: true
  offtime_id:
    name: offtime_id
    description: unique identifier
    type: string
    in: query
  offtime_fade_in:
    name: fade_in    
    type: string
    in: query
  offtime_start:
    name: start    
    type: string
    in: query
  offtime_end:
    name: end    
    type: string
    in: query
  offtime_fade_out:
    name: fade_out    
    type: string
    in: query
  offtime_body:      
    in: "body"              
    name: "offtime_data"
    description: "object that needs to be added"
    required: true
    schema:
      $ref: "#/definitions/Offtime"


definitions:
  Person:
    type: "object"
    required:
    - "firstname"
    - "lastname"
    properties:
      id:
        type: "string"        
      firstname:
        type: "string"
        example: "Hans"
      lastname:
        type: "string"
        example: "Meier"
        
  Ministrant:
    type: "object"
    required:
    - "person_id"    
    properties:
      id:
        type: "string"        
      person_id:
        type: "string"        
      tel_home:
        type: "string"
      tel_mobile:
         type: "string"
      email:
         type: "string"
      since:
         type: "string"
         format: "date-time"
         
  Offtime:
    type: "object"
    required:
    - "person_id"
    - "start"
    - "end"
    properties:
      id:
        type: "string"        
      person_id:
        type: "string"        
      fade_in:
        type: "string"
        format: "date-time"
        example: "01.01.2019 17:00"
      start:
        type: "string"
        format: "date-time"
        example: "01.01.2019 17:00"
      end:
        type: "string"
        format: "date-time"
        example: "01.01.2019 19:00"
      fade_out:
        type: "string"
        format: "date-time"
        example: "01.01.2019 17:00"
        
  
responses:
   Persons:
      description: Return the persons
      schema:
        type: array
        items:
          $ref: '#/definitions/Person'
   Person:
      description: Return the persons
      schema:
        $ref: '#/definitions/Person'
        
   Ministranten:
      description: Return the persons
      schema:
        type: array
        items:
          $ref: '#/definitions/Ministrant'
   Ministrant:
      description: Return the persons
      schema:
        $ref: '#/definitions/Ministrant'
        
   Offtimes:
      description: Return the Offtimes
      schema:
        type: array
        items:
          $ref: '#/definitions/Offtime'
   Offtime:
      description: Return the Offtime
      schema:
        $ref: '#/definitions/Offtime'
      
   invalidinput:
        description: "Invalid input"